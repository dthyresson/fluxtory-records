// Don't forget to tell Prisma about your edits to this file using
// `yarn rw prisma migrate dev` or `yarn rw prisma db push`.
// `migrate` is like committing while `push` is for prototyping.
// Read more about both here:
// https://www.prisma.io/docs/orm/prisma-migrate

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model Label {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  discogsId Int?      @unique
  name      String    @unique
  releases  Release[]
}

model Artist {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  discogsId Int?
  name      String?   @unique
  releases  Release[]
}

model Release {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  discogsId     Int      @unique
  status        String?
  format        String?
  catalogNumber String?
  thumbnail     String?
  resourceUrl   String?
  uri           String?
  title         String
  year          Int
  notes         String?
  labelId       Int?
  label         Label?   @relation(fields: [labelId], references: [id])
  artistId      Int?
  artist        Artist?  @relation(fields: [artistId], references: [id])
  images        Image[]
  genre         Genre?   @relation(fields: [genreId], references: [id])
  genreId       Int?
  style         Style?   @relation(fields: [styleId], references: [id])
  styleId       Int?
}

model Image {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  type          String
  uri           String       @unique
  resourceUrl   String
  uri150        String
  width         Int
  height        Int
  releaseId     Int
  release       Release      @relation(fields: [releaseId], references: [id])
  TrainingSet   TrainingSet? @relation(fields: [trainingSetId], references: [id])
  trainingSetId Int?
}

model Genre {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  releases Release[]
}

model Style {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  releases Release[]
}

model TrainingSet {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  version     Int      @unique @default(1)
  description String?
  images      Image[]
}
